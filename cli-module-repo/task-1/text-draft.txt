Research the history of the Command Line Interface (CLI)
= Until 1960s computers used mechanical punch cards were the primary medium for input of both computer programs and data. You have to manually punch card and it requires a trained individual to operate the system. Due to the limitations, we only had primitive languages like Assembly code, COBOL and FORTRAN.
When engineers figured out to use a magnetic tape for storage, a display and keyboard from a typewriter, a new era of computing was born. "By the early 1960s, engineers had attached a Cathode Ray Tube (CRT) monitor to the TeleTYpewriter (TTY) machine." (Montagnino, Part-1) The combination of keyboard and monitor marked the beginning of modern day computers. "Users would type a command, hit the Enter key, and the computer would respond. These were called command-line interfaces!" (Montagnino, Part-1) 

In the 1970s early versions of Graphical User Interfaces(GUIs) were invented. When the Computer mouse was invented, it led to the development of personal computers and operating systems for common people that revolutionzed modern life. 
Notable Figures: 
Ken Thompson and Dennis Ritchie:

Founders of Unix, which laid the foundation for the modern CLI. They developed the Unix operating system at Bell Labs, featuring the command-line interface as a central component.
Brian Kernighan:

A co-author of "The C Programming Language" and a key contributor to Unix. He played a significant role in shaping the design and development of Unix and its command-line interface.
Richard Stallman:

Founder of the Free Software Foundation and the GNU Project, which aimed to create a free Unix-like operating system. The GNU tools, including the GNU Compiler Collection (GCC) and bash shell, are critical components of modern CLI.
Stephen R. Bourne:

Developed the Bourne shell (sh), one of the earliest Unix shells, which served as the basis for subsequent shells and greatly influenced the evolution of CLI.
Linus Torvalds:

Creator of the Linux kernel, which, when combined with GNU tools and utilities, resulted in the popular Linux operating system, utilizing the CLI extensively.
Terminal v/s Shell 
Terminal or Terminal Emulator 
= The application or program where you enter commands. Terminal(Mac), Windows Command Prompt, Alacritty, st, etc. are common terminals.

Shell
= The shellis the language that your terminal uses. (Use command echo $0 to see your shell language). Today Bash (and other shells like bash), Windows Command prompt and Powershell are the most popular shell. The Zsh, based on Bash is the most popular among programmers.

Today, majority of users use graphical programs to do any task. But, there's also an active and vibrant community of CLI program users. Ranger is a popular file manager, Vim and Emacs for any text editing, brew, chocolatey, apt, pacman for package manager, ffmpeg for editing and converting video files, cmus for music player, tmux for terminal server, Zathura for ebook viewer and many more. 

Bash Commands
Bash(Bourne Again Shell) comes with some basic commands to interact with your computer. You can view and move between directories (cd, ls, mv, cp, rm, mkdir), create, view and edit text files (touch, cat, less, more), and compile/ source config files (for example, source ~/.zshrc).

Advantages of CLI over GUI
- CLI has faster performance. CLI programs do not have to render big 
- You can user command arguments to specify the options you need rather than clicking on GUI buttons to find what you need. 
- CLI programs follow UNIX philosophy of modularity i.e. a program should be designed to do one specific task and should communicate with other programs. This is an important distinction that makes CLI pleasant, efficient and miles better than GUI. 
- Automation with script. Since most of your work is just a set of commands. You can create a shell script and run with a simple alias. No matter the size of the task, if you can write a script for it, it will run. You can also copy scripts from the Internet and use it for your work.

Works Cited.
Montagnino, Marian. Building Modern CLI Applications in Go. Packt Publishing. Mar 2023
